// Parent class: Phone
class Phone {
  constructor(brand, model) {
    this.brand = brand; // can be accessed anyone outside this class
    var model = model; // making it private is encapsulation
    var isPoweredOn = true;
    this.getpowerOn =() => {  //getter method
      isPoweredOn = true;
      console.log(`${this.brand} ${this.model} is now powered on.`);
    }
   // Common method for making a call
  this.getmakeCall = () => {
    console.log(`Calling from ${brand} ${model}`);
  }
  }
}
// inheritance reusable of classes 
// Child class: Smartphone
class Smartphone extends Phone {
  constructor(brand, model, operatingSystem) {
    super(brand, model);
    this.operatingSystem = operatingSystem;
  }
  getoperatingSystem = () => {
      console.log(`the os is ${this.operatingSystem}`);
  }
  // makeCall method
  makeCall() {
    console.log(`Making a call from ${this.brand} ${this.model} using a smartphone.`);
  }
}

// Child class: FeaturePhone
class FeaturePhone extends Phone {
  constructor(brand, model, batteryLife) {
    super(brand, model);
    this.batteryLife = batteryLife;
  }

  // makeCall method 
  makeCall() {
    console.log(`Making a call from ${this.brand} ${this.model} using a feature phone.`);
  }
}

// Create instances of the Phone, Smartphone, and FeaturePhone classes
const genericPhone = new Phone("Generic", "Basic");
const iphone = new Smartphone("Apple", "iPhone 13", "iOS");
const nokia = new FeaturePhone("Nokia", "3310", "5 days");

// polymorphism makecall method in every class and also encapsulation
genericPhone.getmakeCall(); 
iphone.makeCall();
nokia.makeCall();
//inheritance
iphone.getpowerOn(); 
// here iphone is istanced in smartphone but can use phone class method
console.log(iphone);
console.log(genericPhone);

